import scala.collection.mutable.ListBuffer
import org.apache.spark.sql.DataFrame
import org.apache.spark.sql.functions.{lit, explode, collect_list, struct}
import org.apache.spark.sql.types.{StructField, StructType}
import java.util.Calendar
import java.text.SimpleDateFormat
import org.apache.spark.sql.functions._
import org.apache.spark.sql.SparkSession

val spark = SparkSession.builder().appName("flight").enableHiveSupport().getOrCreate()

val passengersData = spark.read.option("header",true).option("delimiter", ",").option("dateFormat", "yyyy-MM-dd").option("inferSchema", "true").csv("dbfs:/FileStore/shared_uploads/sheik5azmal@gmail.com/passengers.csv")

val flightData = spark.read.option("header",true).option("delimiter", ",").option("dateFormat", "yyyy-MM-dd").option("inferSchema", "true").csv("dbfs:/FileStore/shared_uploads/sheik5azmal@gmail.com/flightData.csv")


//Solution-1 Find the total number of flights for each month.

val flightsPerMonth = flightData.select("flightId", "date").distinct().groupBy(trunc(col("date"), "month").alias("Month")).agg(count("flightId").alias("Number of Flights")).orderBy(asc("Month"))


flightsPerMonth.show
+----------+-----------------+
|     Month|Number of Flights|
+----------+-----------------+
|2017-01-01|               97|
|2017-02-01|               73|
|2017-03-01|               82|
|2017-04-01|               92|
|2017-05-01|               92|
|2017-06-01|               71|
|2017-07-01|               87|
|2017-08-01|               76|
|2017-09-01|               85|
|2017-10-01|               76|
|2017-11-01|               75|
|2017-12-01|               94|
+----------+-----------------+



//Solution-2 Find the names of the 100 most frequent flyers.

val frequentFlyers = flightData.select("passengerId", "flightId")
    .groupBy("passengerId")
    .count
    .orderBy(desc("count"))
    .withColumnRenamed("count", "numberOfFlights")
    .limit(100)
    .orderBy(asc("passengerId"))
    .persist

val topFrequentFlyers = frequentFlyers
    .join(passengersData, "passengerId")
    .orderBy(desc("numberOfFlights"))


topFrequentFlyers.show

+-----------+---------------+---------+--------+
|passengerId|numberOfFlights|firstName|lastName|
+-----------+---------------+---------+--------+
|       2068|             32|  Yolande|    Pete|
|       4827|             27|    Jaime|   Renay|
|       1677|             27|Katherina|Vasiliki|
|       3173|             26| Sunshine|   Scott|
|       8961|             26|    Ginny|   Clara|
|       2857|             25|      Son| Ginette|
|       6084|             25|     Cole|  Sharyl|
|       8363|             25|   Branda|  Kimiko|
|       5867|             25|    Luise| Raymond|
|       5096|             25|   Blythe|    Hyon|
|        288|             25|   Pamila|   Mavis|
|        917|             25|   Anisha|  Alaine|
|        760|             25|   Vernia|     Mui|
|       2441|             24|    Kayla|   Rufus|
|       1240|             24|Catherine|   Missy|
|       5668|             24|   Gladis| Earlene|
|       1343|             24|  Bennett|   Staci|
|       3367|             24|Priscilla|   Corie|
|       7643|             23|   Albina|    Joni|
|       1673|             23|   Jeanie|  Gladis|
+-----------+---------------+---------+--------+
only showing top 20 rows

//Solution-3 Find the greatest number of countries a passenger has been in without being in the UK. For example, if the countries a passenger was in were: UK -> FR -> US -> CN -> UK -> DE -> UK, the correct answer would be 3 countries.

val flightDataSolution3 = flightData.withColumn(
        "direction",
        when(lower(col("from")) === "uk", 1)
        .when(lower(col("to"))   === "uk", -1)
        .otherwise(0)
    )
    .withColumn(
        "count", lit(1)
    )
    .orderBy(asc("passengerId"), asc("date"))

flightDataSolution3.printSchema()
flightDataSolution3.createOrReplaceTempView("flightDataSolution3")

val querySequencedRun = """
SELECT
    f.*,
    ROW_NUMBER() OVER (PARTITION BY passengerId ORDER BY passengerId, date) as seq
FROM
    flightDataSolution3 f
ORDER BY
    passengerId, date
"""

val sequencedRun = spark.sql(querySequencedRun)
sequencedRun.createOrReplaceTempView("sequencedRun")

val queryLongestRun = """
WITH
    closedRun AS (
        SELECT
            passengerId,
            from, to,
            direction,
            seq,
            CASE
                WHEN direction == 1
                THEN lead(seq) OVER (PARTITION BY passengerId ORDER BY seq)
            END AS return,
            CASE
                WHEN direction == 1
                THEN lead(seq) OVER (PARTITION BY passengerId ORDER BY seq) - seq
            END AS countries
        FROM sequencedRun s
        WHERE
            direction != 0
            AND EXISTS (  
                SELECT passengerId
                FROM
                    sequencedRun
                WHERE
                    direction != 0 AND
                    passengerId == s.passengerId
                GROUP BY
                    passengerId
                Having count(DISTINCT direction) == 2
            )
        ORDER BY
            passengerId, seq
    )
   

SELECT
    passengerId as `Passenger ID`,
    max(countries) as `Longest Run`
FROM closedRun
WHERE
    countries IS NOT NULL
GROUP BY
    passengerId
ORDER BY
    max(countries) DESC
"""

val timing = new StringBuffer
def timed[T](label: String, code: => T): T = {
    val start = System.currentTimeMillis()
    val result = code
    val stop = System.currentTimeMillis()
    timing.append(s"Processing $label took ${stop - start} ms.\n")
    result
}
val longestRun = spark.sql(queryLongestRun)


longestRun.show
+------------+-----------+
|Passenger ID|Longest Run|
+------------+-----------+
|        2975|         16|
|        8562|         15|
|        3573|         15|
|         760|         15|
|        2939|         15|
|         755|         14|
|        2926|         14|
|        3600|         14|
|        2935|         14|
|        2982|         14|
|        8590|         14|
|        8363|         13|
|        7643|         13|
|         917|         13|
|        1053|         12|
|        8961|         12|
|        3565|         12|
|        1982|         12|
|        2906|         11|
|         746|         11|
+------------+-----------+
only showing top 20 rows